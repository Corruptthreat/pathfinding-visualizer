{"version":3,"sources":["serviceWorker.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/astar.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingAlgorithms/randomWalk.js","pathfindingAlgorithms/greedyBestFirstSearch.js","pathfindingAlgorithms/bidirectionalBestFirstSearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js"],"names":["Boolean","window","location","hostname","match","walls","Node","props","state","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","cellHeight","id","className","style","Component","NavBar","algorithm","maze","pathState","mazeState","selection","visualizingAlgorithm","generatingMaze","setState","clearPath","clearGrid","clearTemp","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","visualizeBidirectionalBFS","visualizeBFS","visualizeDFS","visualizeRandomWalk","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","href","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","selectAlgorithm","visualizeAlgorithm","selectMaze","generateMaze","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","getRandomNeighbour","neighboursFilteredStartAndWall","neighboursFilteredVisited","random","numNodesVisited","count","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","i","array","max","randomNum","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","startFinishNode","randomNums","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getStartFinishNode","PathfindingVisualizer","mouseIsPressed","innerWidth","innerHeight","updateDimensions","animateShortestPath","nodesInShortestPathOrder","setTimeout","newGrid","updateNodesForRender","document","getElementById","animateAlgorithm","newNode","animateRandomWalk","animateMaze","getNewGridWithMaze","addEventListener","getInitialGrid","getNewGridWithWalls","getGridWithoutPath","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","undefined","currentNode","unshift","getNodesInShortestPathOrderDijkstra","totalDistance","astar","getNodesInShortestPathOrderAstar","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","nodesVisited","randomWalk","greedyBFS","getNodesInShortestPathOrderGreedyBFS","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalBFS","getNodesInShortestPathOrderBidirectionalBFS","animateBidirectionalAlgorithm","randomMaze","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af382b51.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let walls;\r\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let dir;\r\n  let num;\r\n  if (vertical.length > horizontal.length) {\r\n    dir = 0;\r\n    num = generateOddRandomNumber(vertical);\r\n  }\r\n  if (vertical.length <= horizontal.length) {\r\n    dir = 1;\r\n    num = generateOddRandomNumber(horizontal);\r\n  }\r\n\r\n  if (dir === 0) {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical.slice(0, vertical.indexOf(num)),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical.slice(vertical.indexOf(num) + 1),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  } else {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(0, horizontal.indexOf(num)),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(horizontal.indexOf(num) + 1),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  }\r\n}\r\n\r\nfunction generateOddRandomNumber(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (dir === 0) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === startNode.row && num === startNode.col) ||\r\n        (temp === finishNode.row && num === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if (\r\n        (num === startNode.row && temp === startNode.col) ||\r\n        (num === finishNode.row && temp === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 !== 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return randomNum;\r\n}\r\n","let walls;\r\nexport function verticalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (vertical.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of vertical) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of horizontal) {\r\n    if (\r\n      (temp === startNode.row && num === startNode.col) ||\r\n      (temp === finishNode.row && num === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([temp, num]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      isVisited,\r\n      isShortest,\r\n      onMouseEnter,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      width,\r\n      height,\r\n      numRows,\r\n      numColumns,\r\n    } = this.props;\r\n\r\n    const extraClass = isStart\r\n      ? \"node node-start\"\r\n      : isFinish\r\n      ? \"node node-finish\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isShortest\r\n      ? \"node node-shortest-path\"\r\n      : isVisited\r\n      ? \"node node-visited\"\r\n      : \"node\";\r\n\r\n    const cellWidth = Math.floor((width - 20) / numColumns);\r\n    const cellHeight = Math.floor((height - 120) / numRows);\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`${extraClass}`}\r\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    algorithm: \"Visualize Algorithm\",\r\n    maze: \"Generate Maze\",\r\n    pathState: false,\r\n    mazeState: false,\r\n  };\r\n\r\n  selectAlgorithm(selection) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.algorithm ||\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: selection });\r\n    } else if (this.state.pathState) {\r\n      this.clearPath();\r\n      this.setState({ algorithm: selection });\r\n    } else {\r\n      this.setState({ algorithm: selection });\r\n    }\r\n  }\r\n\r\n  selectMaze(selection) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.maze ||\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: selection });\r\n    } else if (!this.state.mazeState) {\r\n      this.setState({ maze: selection });\r\n    } else {\r\n      this.clearGrid();\r\n      this.setState({ maze: selection });\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.pathState) {\r\n      this.clearTemp();\r\n      return;\r\n    }\r\n    if (\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: \"Select an Algorithm!\" });\r\n    } else {\r\n      this.setState({ pathState: true });\r\n      if (this.state.algorithm === \"Visualize Dijkstra\")\r\n        this.props.visualizeDijkstra();\r\n      else if (this.state.algorithm === \"Visualize A*\")\r\n        this.props.visualizeAStar();\r\n      else if (this.state.algorithm === \"Visualize Greedy Best First Search\")\r\n        this.props.visualizeGreedyBFS();\r\n      else if (\r\n        this.state.algorithm === \"Visualize Bidirectional Best First Search\"\r\n      )\r\n        this.props.visualizeBidirectionalBFS();\r\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\r\n        this.props.visualizeBFS();\r\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\r\n        this.props.visualizeDFS();\r\n      else if (this.state.algorithm === \"Visualize Random Walk\")\r\n        this.props.visualizeRandomWalk();\r\n    }\r\n  }\r\n\r\n  generateMaze() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.mazeState || this.state.pathState) {\r\n      this.clearTemp();\r\n    }\r\n    if (\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: \"Select a Maze!\" });\r\n    } else {\r\n      this.setState({ mazeState: true });\r\n      if (this.state.maze === \"Generate Random Maze\")\r\n        this.props.generateRandomMaze();\r\n      else if (this.state.maze === \"Generate Recursive Division Maze\")\r\n        this.props.generateRecursiveDivisionMaze();\r\n      else if (this.state.maze === \"Generate Vertical Division Maze\")\r\n        this.props.generateVerticalMaze();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      algorithm: \"Visualize Algorithm\",\r\n      maze: \"Generate Maze\",\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearPath();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearTemp() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a\r\n          className=\"navbar-brand h1 mb-0\"\r\n          href=\"https://rohithaug.github.io/pathfinding-visualizer/\"\r\n        >\r\n          Pathfinding Visualizer\r\n        </a>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\r\n                  >\r\n                    Dijkstra's Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize A*\")}\r\n                  >\r\n                    A* Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Greedy Best First Search\")\r\n                    }\r\n                  >\r\n                    Greedy Best First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\r\n                        \"Visualize Bidirectional Best First Search\"\r\n                      )\r\n                    }\r\n                  >\r\n                    Bidirectional Best First Search\r\n                  </button>\r\n                  <div className=\"dropdown-divider\"></div>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\r\n                    }\r\n                  >\r\n                    Breadth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\r\n                    }\r\n                  >\r\n                    Depth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Random Walk\")\r\n                    }\r\n                  >\r\n                    Random Walk\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-success\"\r\n                onClick={() => this.visualizeAlgorithm()}\r\n              >\r\n                {this.state.algorithm}\r\n              </button>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Mazes\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\r\n                  >\r\n                    Random Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectMaze(\"Generate Recursive Division Maze\")\r\n                    }\r\n                  >\r\n                    Recursive Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectMaze(\"Generate Vertical Division Maze\")\r\n                    }\r\n                  >\r\n                    Vertical Division Maze\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-success\"\r\n                onClick={() => this.generateMaze()}\r\n              >\r\n                {this.state.maze}\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => this.clearGrid()}\r\n              >\r\n                Clear Gird\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default NavBar;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getNodes(grid);\r\n  let visitedNodesInOrder = [];\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    updateUnvisitedNeighbours(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n    unvisitedNeighbour.distance = node.distance + 1;\r\n    unvisitedNeighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours\r\n    .filter((neighbour) => !neighbour.isWall)\r\n    .filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = g(n) + h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function breadthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\r\n        unvisitedNodes.push(unvisitedNeighbour);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function depthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      unvisitedNodes.unshift(unvisitedNeighbour);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function randomWalk(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let visitedNodesInOrder = [];\r\n  let closestNode = startNode;\r\n  let maxNodes = grid.length * grid[0].length;\r\n  let maxNodesVisitedTracker = 0;\r\n  let loopTracker = 0;\r\n  while (true) {\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return [visitedNodesInOrder, true];\r\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\r\n    let nodesVisited = numNodesVisited(grid);\r\n    if (nodesVisited === maxNodes - 2) {\r\n      return [visitedNodesInOrder, false];\r\n    }\r\n    if (nodesVisited > maxNodesVisitedTracker) {\r\n      maxNodesVisitedTracker = nodesVisited;\r\n      loopTracker = 0;\r\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\r\n      loopTracker += 1;\r\n      if (loopTracker > 1000) {\r\n        return [visitedNodesInOrder, false];\r\n      }\r\n    }\r\n    randomNeighbour.previousNode = closestNode;\r\n    closestNode = randomNeighbour;\r\n  }\r\n}\r\n\r\nfunction getRandomNeighbour(node, grid, finishNode) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  let neighboursFilteredStartAndWall = neighbours.filter(\r\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\r\n  );\r\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\r\n    (neighbour) => !neighbour.isVisited\r\n  );\r\n  if (neighboursFilteredVisited.length > 0) {\r\n    return neighboursFilteredVisited[\r\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\r\n    ];\r\n  }\r\n  return neighboursFilteredStartAndWall[\r\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\r\n  ];\r\n}\r\n\r\nfunction numNodesVisited(grid) {\r\n  let count = 0;\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      if (node.isVisited || node.isWall) count += 1;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n","export function greedyBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function bidirectionalBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodesStart = [];\r\n  let visitedNodesInOrderStart = [];\r\n  let unvisitedNodesFinish = [];\r\n  let visitedNodesInOrderFinish = [];\r\n  startNode.distance = 0;\r\n  finishNode.distance = 0;\r\n  unvisitedNodesStart.push(startNode);\r\n  unvisitedNodesFinish.push(finishNode);\r\n\r\n  while (\r\n    unvisitedNodesStart.length !== 0 &&\r\n    unvisitedNodesFinish.length !== 0\r\n  ) {\r\n    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNodeStart = unvisitedNodesStart.shift();\r\n    let closestNodeFinish = unvisitedNodesFinish.shift();\r\n\r\n    closestNodeStart.isVisited = true;\r\n    closestNodeFinish.isVisited = true;\r\n    visitedNodesInOrderStart.push(closestNodeStart);\r\n    visitedNodesInOrderFinish.push(closestNodeFinish);\r\n    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\r\n      return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n    }\r\n\r\n    //Start side search\r\n    let neighbours = getNeighbours(closestNodeStart, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        visitedNodesInOrderFinish.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeStart.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        unvisitedNodesStart.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      }\r\n    }\r\n\r\n    //Finish side search\r\n    neighbours = getNeighbours(closestNodeFinish, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        visitedNodesInOrderStart.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeFinish.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        unvisitedNodesFinish.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      }\r\n    }\r\n  }\r\n  return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\r\n}\r\n\r\nfunction isNeighbour(closestNodeStart, closestNodeFinish) {\r\n  let rowStart = closestNodeStart.row;\r\n  let colStart = closestNodeStart.col;\r\n  let rowFinish = closestNodeFinish.row;\r\n  let colFinish = closestNodeFinish.col;\r\n  if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart + 1) return true;\r\n  if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart - 1) return true;\r\n  return false;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(nodeA, nodeB) {\r\n  let x = Math.abs(nodeA.row - nodeB.row);\r\n  let y = Math.abs(nodeA.col - nodeB.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBidirectionalBFS(nodeA, nodeB) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = nodeB;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  currentNode = nodeA;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./pathfindingVisualizer.css\";\r\nimport Node from \"./Node/node\";\r\nimport NavBar from \"./navbar\";\r\n\r\n//Pathfinding Algorithms\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../pathfindingAlgorithms/dijkstra\";\r\nimport {\r\n  astar,\r\n  getNodesInShortestPathOrderAstar,\r\n} from \"../pathfindingAlgorithms/astar\";\r\nimport {\r\n  breadthFirstSearch,\r\n  getNodesInShortestPathOrderBFS,\r\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\r\nimport {\r\n  depthFirstSearch,\r\n  getNodesInShortestPathOrderDFS,\r\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\r\nimport { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\r\nimport {\r\n  greedyBFS,\r\n  getNodesInShortestPathOrderGreedyBFS,\r\n} from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\r\nimport {\r\n  bidirectionalBFS,\r\n  getNodesInShortestPathOrderBidirectionalBFS,\r\n} from \"../pathfindingAlgorithms/bidirectionalBestFirstSearch\";\r\n\r\n//Maze Algorithms\r\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\r\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\r\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\r\n\r\nconst startFinishNode = getStartFinishNode();\r\nconst startNodeRow = startFinishNode[0];\r\nconst startNodeCol = startFinishNode[1];\r\nconst finishNodeRow = startFinishNode[2];\r\nconst finishNodeCol = startFinishNode[3];\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    mouseIsPressed: false,\r\n    visualizingAlgorithm: false,\r\n    generatingMaze: false,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    //numColumns: Math.floor(window.innerWidth / 25),\r\n    numColumns: 60,\r\n    //numRows: Math.floor(window.innerWidth / (30 * 2.5)),\r\n    numRows: 24,\r\n  };\r\n\r\n  updateDimensions = () => {\r\n    this.setState({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.mouseIsPressed) {\r\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          !(\r\n            (row === startNodeRow && col === startNodeCol) ||\r\n            (row === finishNodeRow && col === finishNodeCol)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-shortest-path\"\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getGridWithoutPath(this.state.grid);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n    });\r\n  }\r\n\r\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\r\n    if (nodesInShortestPathOrder.length === 1)\r\n      this.setState({ visualizingAlgorithm: false });\r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        setTimeout(() => {\r\n          let newGrid = updateNodesForRender(\r\n            this.state.grid,\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\r\n        }, i * 30);\r\n        return;\r\n      }\r\n      let node = nodesInShortestPathOrder[i];\r\n      setTimeout(() => {\r\n        //shortest path node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, i * 30);\r\n    }\r\n  };\r\n\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    let newGrid = this.state.grid.slice();\r\n    for (let row of newGrid) {\r\n      for (let node of row) {\r\n        let newNode = {\r\n          ...node,\r\n          isVisited: false,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * 10);\r\n    }\r\n  };\r\n\r\n  animateRandomWalk = (visitedNodesInOrder) => {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ visualizingAlgorithm: false });\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          //finish node\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-finish-reached\";\r\n        }, i * 10);\r\n        continue;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * 10);\r\n    }\r\n  };\r\n\r\n  animateBidirectionalAlgorithm(\r\n    visitedNodesInOrderStart,\r\n    visitedNodesInOrderFinish,\r\n    nodesInShortestPathOrder,\r\n    isShortedPath\r\n  ) {\r\n    let len = Math.max(\r\n      visitedNodesInOrderStart.length,\r\n      visitedNodesInOrderFinish.length\r\n    );\r\n    for (let i = 1; i <= len; i++) {\r\n      let nodeA = visitedNodesInOrderStart[i];\r\n      let nodeB = visitedNodesInOrderFinish[i];\r\n      if (i === visitedNodesInOrderStart.length) {\r\n        setTimeout(() => {\r\n          if (isShortedPath) {\r\n            this.animateShortestPath(nodesInShortestPathOrder);\r\n          } else {\r\n            this.setState({ visualizingAlgorithm: false });\r\n          }\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited nodes\r\n        if (nodeA !== undefined)\r\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\r\n            \"node node-visited\";\r\n        if (nodeB !== undefined)\r\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\r\n            \"node node-visited\";\r\n      }, i * 10);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = breadthFirstSearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeRandomWalk() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const temp = randomWalk(grid, startNode, finishNode);\r\n      const visitedNodesInOrder = temp[0];\r\n      const pathExist = temp[1];\r\n      //if (!pathExist) console.log(\"No Path\");\r\n      this.animateRandomWalk(visitedNodesInOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeGreedyBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderGreedyBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeBidirectionalBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = bidirectionalBFS(grid, startNode, finishNode);\r\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\r\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\r\n      const isShortedPath = visitedNodesInOrder[2];\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalBFS(\r\n        visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\r\n        visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\r\n      );\r\n      this.animateBidirectionalAlgorithm(\r\n        visitedNodesInOrderStart,\r\n        visitedNodesInOrderFinish,\r\n        nodesInShortestPathOrder,\r\n        isShortedPath\r\n      );\r\n    }, 10);\r\n  }\r\n\r\n  animateMaze = (walls) => {\r\n    for (let i = 0; i <= walls.length; i++) {\r\n      if (i === walls.length) {\r\n        setTimeout(() => {\r\n          this.clearGrid();\r\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\r\n          this.setState({ grid: newGrid, generatingMaze: false });\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      let wall = walls[i];\r\n      let node = this.state.grid[wall[0]][wall[1]];\r\n      setTimeout(() => {\r\n        //Walls\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-wall-animated\";\r\n      }, i * 10);\r\n    }\r\n  };\r\n\r\n  generateRandomMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = randomMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  generateRecursiveDivisionMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  generateVerticalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = verticalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  render() {\r\n    let { grid } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\r\n          generatingMaze={this.state.generatingMaze}\r\n          visualizeDijkstra={this.visualizeDijkstra.bind(this)}\r\n          visualizeAStar={this.visualizeAStar.bind(this)}\r\n          visualizeGreedyBFS={this.visualizeGreedyBFS.bind(this)}\r\n          visualizeBidirectionalBFS={this.visualizeBidirectionalBFS.bind(this)}\r\n          visualizeBFS={this.visualizeBFS.bind(this)}\r\n          visualizeDFS={this.visualizeDFS.bind(this)}\r\n          visualizeRandomWalk={this.visualizeRandomWalk.bind(this)}\r\n          generateRandomMaze={this.generateRandomMaze.bind(this)}\r\n          generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(\r\n            this\r\n          )}\r\n          generateVerticalMaze={this.generateVerticalMaze.bind(this)}\r\n          clearGrid={this.clearGrid.bind(this)}\r\n          clearPath={this.clearPath.bind(this)}\r\n        />\r\n        <div\r\n          className={\r\n            this.state.visualizingAlgorithm || this.state.generatingMaze\r\n              ? \"grid-visualizing\"\r\n              : \"grid\"\r\n          }\r\n        >\r\n          {grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId}>\r\n                {row.map((node, nodeId) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isVisited,\r\n                    isShortest,\r\n                    isWall,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeId}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isVisited={isVisited}\r\n                      isShortest={isShortest}\r\n                      isWall={isWall}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      width={this.state.width}\r\n                      height={this.state.height}\r\n                      numRows={this.state.numRows}\r\n                      numColumns={this.state.numColumns}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getStartFinishNode() {\r\n  let randomNums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5];\r\n  const startNodeRow = 11 + randomNums[Math.floor(Math.random() * 11)];\r\n  const startNodeCol =\r\n    16 + randomNums.slice(1, 6)[Math.floor(Math.random() * 5)];\r\n  const finishNodeRow = 11 + randomNums[Math.floor(Math.random() * 11)];\r\n  const finishNodeCol =\r\n    44 + randomNums.slice(5, 10)[Math.floor(Math.random() * 5)];\r\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\r\n}\r\n\r\nconst getInitialGrid = (numRows, numColumns) => {\r\n  let grid = [];\r\n  for (let row = 0; row < numRows; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < numColumns; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    distance: Infinity,\r\n    totalDistance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWalls = (grid, row, col) => {\r\n  let newGrid = grid.slice();\r\n  let node = grid[row][col];\r\n  let newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithMaze = (grid, walls) => {\r\n  let newGrid = grid.slice();\r\n  for (let wall of walls) {\r\n    let node = grid[wall[0]][wall[1]];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: true,\r\n    };\r\n    newGrid[wall[0]][wall[1]] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithoutPath = (grid) => {\r\n  let newGrid = grid.slice();\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      let newNode = {\r\n        ...node,\r\n        distance: Infinity,\r\n        totalDistance: Infinity,\r\n        isVisited: false,\r\n        isShortest: false,\r\n        previousNode: null,\r\n      };\r\n      newGrid[node.row][node.col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst updateNodesForRender = (\r\n  grid,\r\n  nodesInShortestPathOrder,\r\n  visitedNodesInOrder\r\n) => {\r\n  let newGrid = grid.slice();\r\n  for (let node of visitedNodesInOrder) {\r\n    if (\r\n      (node.row === startNodeRow && node.col === startNodeCol) ||\r\n      (node.row === finishNodeRow && node.col === finishNodeCol)\r\n    )\r\n      continue;\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n  for (let node of nodesInShortestPathOrder) {\r\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\r\n      return newGrid;\r\n    }\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: false,\r\n      isShortest: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n\r\n/* <button className=\"button\" onClick={() => this.visualizeDijkstra()}>\r\nDijkstra's\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeAStar()}>\r\nA Star\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeBFS()}>\r\nBreadth First Search\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeDFS()}>\r\nDepth First Search\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeRandomWalk()}>\r\nRandom Walk\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.clearGrid()}>\r\nClear Grid\r\n</button>\r\n<br />\r\n<button className=\"button\" onClick={() => this.visualizeGreedyBFS()}>\r\nGreedy Best First Search\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.visualizeBidirectionalBFS()}\r\n>\r\nBidirectional Best First Search\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.generateRandomMaze()}>\r\nRandom Maze\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.generateRecursiveDivisionMaze()}\r\n>\r\nRecursive Division\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.generateVerticalMaze()}\r\n>\r\nVertical Maze\r\n</button>\r\n */\r\n","export function randomMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let walls = [];\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      if (\r\n        (row === startNode.row && col === startNode.col) ||\r\n        (row === finishNode.row && col === finishNode.col)\r\n      )\r\n        continue;\r\n      if (Math.random() < 0.33) {\r\n        walls.push([row, col]);\r\n      }\r\n    }\r\n  }\r\n  return walls;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/js/dist/dropdown\";\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}