{"version":3,"sources":["serviceWorker.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/astar.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingAlgorithms/randomWalk.js","pathfindingAlgorithms/greedyBestFirstSearch.js","pathfindingAlgorithms/bidirectionalBestFirstSearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js"],"names":["Boolean","window","location","hostname","match","walls","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","clearTemp","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","visualizeBidirectionalBFS","visualizeBFS","visualizeDFS","visualizeRandomWalk","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","href","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","selectAlgorithm","visualizeAlgorithm","selectMaze","generateMaze","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","getRandomNeighbour","neighboursFilteredStartAndWall","neighboursFilteredVisited","random","numNodesVisited","count","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","i","array","max","randomNum","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","initialNum","getInitialNum","innerHeight","initialNumRows","initialNumColumns","startFinishNode","randomNums","x","y","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getRandomNums","console","log","getStartFinishNode","PathfindingVisualizer","mouseIsPressed","updateDimensions","animateShortestPath","nodesInShortestPathOrder","setTimeout","newGrid","updateNodesForRender","document","getElementById","animateAlgorithm","newNode","animateRandomWalk","animateMaze","getNewGridWithMaze","addEventListener","getInitialGrid","getNewGridWithWalls","getGridWithoutPath","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","getVisitedNodesInOrder","undefined","currentNode","unshift","getNodesInShortestPathOrderDijkstra","totalDistance","astar","getNodesInShortestPathOrderAstar","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","nodesVisited","randomWalk","greedyBFS","getNodesInShortestPathOrderGreedyBFS","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalBFS","getNodesInShortestPathOrderBidirectionalBFS","animateBidirectionalAlgorithm","randomMaze","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","randomNums1","randomNums2","currentRow","createNode","n","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58046665.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let walls;\r\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let dir;\r\n  let num;\r\n  if (vertical.length > horizontal.length) {\r\n    dir = 0;\r\n    num = generateOddRandomNumber(vertical);\r\n  }\r\n  if (vertical.length <= horizontal.length) {\r\n    dir = 1;\r\n    num = generateOddRandomNumber(horizontal);\r\n  }\r\n\r\n  if (dir === 0) {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical.slice(0, vertical.indexOf(num)),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical.slice(vertical.indexOf(num) + 1),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  } else {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(0, horizontal.indexOf(num)),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(horizontal.indexOf(num) + 1),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  }\r\n}\r\n\r\nfunction generateOddRandomNumber(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (dir === 0) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === startNode.row && num === startNode.col) ||\r\n        (temp === finishNode.row && num === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if (\r\n        (num === startNode.row && temp === startNode.col) ||\r\n        (num === finishNode.row && temp === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 !== 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return randomNum;\r\n}\r\n","let walls;\r\nexport function verticalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (vertical.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of vertical) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of horizontal) {\r\n    if (\r\n      (temp === startNode.row && num === startNode.col) ||\r\n      (temp === finishNode.row && num === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([temp, num]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","let walls;\r\nexport function horizontalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (horizontal.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of horizontal) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, vertical, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of vertical) {\r\n    if (\r\n      (num === startNode.row && temp === startNode.col) ||\r\n      (num === finishNode.row && temp === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([num, temp]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      isVisited,\r\n      isShortest,\r\n      onMouseEnter,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      width,\r\n      height,\r\n      numRows,\r\n      numColumns,\r\n    } = this.props;\r\n\r\n    const extraClass = isStart\r\n      ? \"node node-start\"\r\n      : isFinish\r\n      ? \"node node-finish\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isShortest\r\n      ? \"node node-shortest-path\"\r\n      : isVisited\r\n      ? \"node node-visited\"\r\n      : \"node\";\r\n\r\n    let cellWidth = Math.floor((width - 15) / numColumns);\r\n    let cellHeight;\r\n    if (width > 1500) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 1000) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 500) {\r\n      cellHeight = Math.floor((height - 60) / numRows);\r\n    } else if (width > 0) {\r\n      cellHeight = Math.floor((height - 50) / numRows);\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`${extraClass}`}\r\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    algorithm: \"Visualize Algorithm\",\r\n    maze: \"Generate Maze\",\r\n    pathState: false,\r\n    mazeState: false,\r\n  };\r\n\r\n  selectAlgorithm(selection) {\r\n    if (this.props.visualizingAlgorithm) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.algorithm ||\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: selection });\r\n    } else if (this.state.pathState) {\r\n      this.clearPath();\r\n      this.setState({ algorithm: selection });\r\n    } else {\r\n      this.setState({ algorithm: selection });\r\n    }\r\n  }\r\n\r\n  selectMaze(selection) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.maze ||\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: selection });\r\n    } else if (!this.state.mazeState) {\r\n      this.setState({ maze: selection });\r\n    } else {\r\n      this.clearGrid();\r\n      this.setState({ maze: selection });\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.pathState) {\r\n      this.clearTemp();\r\n      return;\r\n    }\r\n    if (\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: \"Select an Algorithm!\" });\r\n    } else {\r\n      this.setState({ pathState: true });\r\n      if (this.state.algorithm === \"Visualize Dijkstra\")\r\n        this.props.visualizeDijkstra();\r\n      else if (this.state.algorithm === \"Visualize A*\")\r\n        this.props.visualizeAStar();\r\n      else if (this.state.algorithm === \"Visualize Greedy BFS\")\r\n        this.props.visualizeGreedyBFS();\r\n      else if (this.state.algorithm === \"Visualize Bidirectional BFS\")\r\n        this.props.visualizeBidirectionalBFS();\r\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\r\n        this.props.visualizeBFS();\r\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\r\n        this.props.visualizeDFS();\r\n      else if (this.state.algorithm === \"Visualize Random Walk\")\r\n        this.props.visualizeRandomWalk();\r\n    }\r\n  }\r\n\r\n  generateMaze() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.mazeState || this.state.pathState) {\r\n      this.clearTemp();\r\n    }\r\n    if (\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: \"Select a Maze!\" });\r\n    } else {\r\n      this.setState({ mazeState: true });\r\n      if (this.state.maze === \"Generate Random Maze\")\r\n        this.props.generateRandomMaze();\r\n      else if (this.state.maze === \"Generate Recursive Maze\")\r\n        this.props.generateRecursiveDivisionMaze();\r\n      else if (this.state.maze === \"Generate Vertical Maze\")\r\n        this.props.generateVerticalMaze();\r\n      else if (this.state.maze === \"Generate Horizontal Maze\")\r\n        this.props.generateHorizontalMaze();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      algorithm: \"Visualize Algorithm\",\r\n      maze: \"Generate Maze\",\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearPath();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearTemp() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a\r\n          className=\"navbar-brand h1 mb-0\"\r\n          href=\"https://rohithaug.github.io/pathfinding-visualizer/\"\r\n        >\r\n          {brand}\r\n        </a>\r\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\r\n                  >\r\n                    Dijkstra's Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize A*\")}\r\n                  >\r\n                    A* Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Greedy BFS\")}\r\n                  >\r\n                    Greedy Best First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Bidirectional BFS\")\r\n                    }\r\n                  >\r\n                    Bidirectional Best First Search\r\n                  </button>\r\n                  <div className=\"dropdown-divider\"></div>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\r\n                    }\r\n                  >\r\n                    Breadth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\r\n                    }\r\n                  >\r\n                    Depth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Random Walk\")\r\n                    }\r\n                  >\r\n                    Random Walk\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.visualizeAlgorithm()}\r\n              >\r\n                {this.state.algorithm}\r\n              </button>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Mazes\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\r\n                  >\r\n                    Random Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Recursive Maze\")}\r\n                  >\r\n                    Recursive Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Vertical Maze\")}\r\n                  >\r\n                    Vertical Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}\r\n                  >\r\n                    Horizontal Division Maze\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.generateMaze()}\r\n              >\r\n                {this.state.maze}\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => this.clearGrid()}\r\n              >\r\n                Clear Gird\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default NavBar;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getNodes(grid);\r\n  let visitedNodesInOrder = [];\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    updateUnvisitedNeighbours(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n    unvisitedNeighbour.distance = node.distance + 1;\r\n    unvisitedNeighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours\r\n    .filter((neighbour) => !neighbour.isWall)\r\n    .filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = g(n) + h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function breadthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\r\n        unvisitedNodes.push(unvisitedNeighbour);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function depthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      unvisitedNodes.unshift(unvisitedNeighbour);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function randomWalk(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let visitedNodesInOrder = [];\r\n  let closestNode = startNode;\r\n  let maxNodes = grid.length * grid[0].length;\r\n  let maxNodesVisitedTracker = 0;\r\n  let loopTracker = 0;\r\n  while (true) {\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\r\n    let nodesVisited = numNodesVisited(grid);\r\n    if (nodesVisited === maxNodes - 2) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nodesVisited > maxNodesVisitedTracker) {\r\n      maxNodesVisitedTracker = nodesVisited;\r\n      loopTracker = 0;\r\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\r\n      loopTracker += 1;\r\n      if (loopTracker > 1000) {\r\n        return visitedNodesInOrder;\r\n      }\r\n    }\r\n    randomNeighbour.previousNode = closestNode;\r\n    closestNode = randomNeighbour;\r\n  }\r\n}\r\n\r\nfunction getRandomNeighbour(node, grid, finishNode) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  let neighboursFilteredStartAndWall = neighbours.filter(\r\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\r\n  );\r\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\r\n    (neighbour) => !neighbour.isVisited\r\n  );\r\n  if (neighboursFilteredVisited.length > 0) {\r\n    return neighboursFilteredVisited[\r\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\r\n    ];\r\n  }\r\n  return neighboursFilteredStartAndWall[\r\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\r\n  ];\r\n}\r\n\r\nfunction numNodesVisited(grid) {\r\n  let count = 0;\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      if (node.isVisited || node.isWall) count += 1;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n","export function greedyBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function bidirectionalBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodesStart = [];\r\n  let visitedNodesInOrderStart = [];\r\n  let unvisitedNodesFinish = [];\r\n  let visitedNodesInOrderFinish = [];\r\n  startNode.distance = 0;\r\n  finishNode.distance = 0;\r\n  unvisitedNodesStart.push(startNode);\r\n  unvisitedNodesFinish.push(finishNode);\r\n\r\n  while (\r\n    unvisitedNodesStart.length !== 0 &&\r\n    unvisitedNodesFinish.length !== 0\r\n  ) {\r\n    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNodeStart = unvisitedNodesStart.shift();\r\n    let closestNodeFinish = unvisitedNodesFinish.shift();\r\n\r\n    closestNodeStart.isVisited = true;\r\n    closestNodeFinish.isVisited = true;\r\n    visitedNodesInOrderStart.push(closestNodeStart);\r\n    visitedNodesInOrderFinish.push(closestNodeFinish);\r\n    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\r\n      return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n    }\r\n\r\n    //Start side search\r\n    let neighbours = getNeighbours(closestNodeStart, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        visitedNodesInOrderFinish.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeStart.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        unvisitedNodesStart.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      }\r\n    }\r\n\r\n    //Finish side search\r\n    neighbours = getNeighbours(closestNodeFinish, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        visitedNodesInOrderStart.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeFinish.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        unvisitedNodesFinish.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      }\r\n    }\r\n  }\r\n  return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\r\n}\r\n\r\nfunction isNeighbour(closestNodeStart, closestNodeFinish) {\r\n  let rowStart = closestNodeStart.row;\r\n  let colStart = closestNodeStart.col;\r\n  let rowFinish = closestNodeFinish.row;\r\n  let colFinish = closestNodeFinish.col;\r\n  if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart + 1) return true;\r\n  if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart - 1) return true;\r\n  return false;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(nodeA, nodeB) {\r\n  let x = Math.abs(nodeA.row - nodeB.row);\r\n  let y = Math.abs(nodeA.col - nodeB.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBidirectionalBFS(nodeA, nodeB) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = nodeB;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  currentNode = nodeA;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./pathfindingVisualizer.css\";\r\nimport Node from \"./Node/node\";\r\nimport NavBar from \"./navbar\";\r\n\r\n//Pathfinding Algorithms\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../pathfindingAlgorithms/dijkstra\";\r\nimport {\r\n  astar,\r\n  getNodesInShortestPathOrderAstar,\r\n} from \"../pathfindingAlgorithms/astar\";\r\nimport {\r\n  breadthFirstSearch,\r\n  getNodesInShortestPathOrderBFS,\r\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\r\nimport {\r\n  depthFirstSearch,\r\n  getNodesInShortestPathOrderDFS,\r\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\r\nimport { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\r\nimport {\r\n  greedyBFS,\r\n  getNodesInShortestPathOrderGreedyBFS,\r\n} from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\r\nimport {\r\n  bidirectionalBFS,\r\n  getNodesInShortestPathOrderBidirectionalBFS,\r\n} from \"../pathfindingAlgorithms/bidirectionalBestFirstSearch\";\r\n\r\n//Maze Algorithms\r\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\r\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\r\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\r\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\r\n\r\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\r\nconst initialNumRows = initialNum[0];\r\nconst initialNumColumns = initialNum[1];\r\n\r\nconst startFinishNode = getStartFinishNode(initialNumRows, initialNumColumns);\r\nconst startNodeRow = startFinishNode[0];\r\nconst startNodeCol = startFinishNode[1];\r\nconst finishNodeRow = startFinishNode[2];\r\nconst finishNodeCol = startFinishNode[3];\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    mouseIsPressed: false,\r\n    visualizingAlgorithm: false,\r\n    generatingMaze: false,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    numRows: initialNumRows,\r\n    numColumns: initialNumColumns,\r\n  };\r\n\r\n  updateDimensions = () => {\r\n    this.setState({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.mouseIsPressed) {\r\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          !(\r\n            (row === startNodeRow && col === startNodeCol) ||\r\n            (row === finishNodeRow && col === finishNodeCol)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-shortest-path\"\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getGridWithoutPath(this.state.grid);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n    });\r\n  }\r\n\r\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\r\n    if (nodesInShortestPathOrder.length === 1)\r\n      this.setState({ visualizingAlgorithm: false });\r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        setTimeout(() => {\r\n          let newGrid = updateNodesForRender(\r\n            this.state.grid,\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\r\n        }, i * 30);\r\n        return;\r\n      }\r\n      let node = nodesInShortestPathOrder[i];\r\n      setTimeout(() => {\r\n        //shortest path node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, i * 30);\r\n    }\r\n  };\r\n\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    let newGrid = this.state.grid.slice();\r\n    for (let row of newGrid) {\r\n      for (let node of row) {\r\n        let newNode = {\r\n          ...node,\r\n          isVisited: false,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * 10);\r\n    }\r\n  };\r\n\r\n  animateRandomWalk = (visitedNodesInOrder) => {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ visualizingAlgorithm: false });\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          //finish node\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-finish-reached\";\r\n        }, i * 10);\r\n        continue;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * 10);\r\n    }\r\n  };\r\n\r\n  animateBidirectionalAlgorithm(\r\n    visitedNodesInOrderStart,\r\n    visitedNodesInOrderFinish,\r\n    nodesInShortestPathOrder,\r\n    isShortedPath\r\n  ) {\r\n    let len = Math.max(\r\n      visitedNodesInOrderStart.length,\r\n      visitedNodesInOrderFinish.length\r\n    );\r\n    for (let i = 1; i <= len; i++) {\r\n      let nodeA = visitedNodesInOrderStart[i];\r\n      let nodeB = visitedNodesInOrderFinish[i];\r\n      if (i === visitedNodesInOrderStart.length) {\r\n        setTimeout(() => {\r\n          let visitedNodesInOrder = getVisitedNodesInOrder(\r\n            visitedNodesInOrderStart,\r\n            visitedNodesInOrderFinish\r\n          );\r\n          if (isShortedPath) {\r\n            this.animateShortestPath(\r\n              nodesInShortestPathOrder,\r\n              visitedNodesInOrder\r\n            );\r\n          } else {\r\n            this.setState({ visualizingAlgorithm: false });\r\n          }\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited nodes\r\n        if (nodeA !== undefined)\r\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\r\n            \"node node-visited\";\r\n        if (nodeB !== undefined)\r\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\r\n            \"node node-visited\";\r\n      }, i * 10);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = breadthFirstSearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeRandomWalk() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\r\n      this.animateRandomWalk(visitedNodesInOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeGreedyBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderGreedyBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 10);\r\n  }\r\n\r\n  visualizeBidirectionalBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = bidirectionalBFS(grid, startNode, finishNode);\r\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\r\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\r\n      const isShortedPath = visitedNodesInOrder[2];\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalBFS(\r\n        visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\r\n        visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\r\n      );\r\n      this.animateBidirectionalAlgorithm(\r\n        visitedNodesInOrderStart,\r\n        visitedNodesInOrderFinish,\r\n        nodesInShortestPathOrder,\r\n        isShortedPath\r\n      );\r\n    }, 10);\r\n  }\r\n\r\n  animateMaze = (walls) => {\r\n    for (let i = 0; i <= walls.length; i++) {\r\n      if (i === walls.length) {\r\n        setTimeout(() => {\r\n          this.clearGrid();\r\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\r\n          this.setState({ grid: newGrid, generatingMaze: false });\r\n        }, i * 10);\r\n        return;\r\n      }\r\n      let wall = walls[i];\r\n      let node = this.state.grid[wall[0]][wall[1]];\r\n      setTimeout(() => {\r\n        //Walls\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-wall-animated\";\r\n      }, i * 10);\r\n    }\r\n  };\r\n\r\n  generateRandomMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = randomMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  generateRecursiveDivisionMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  generateVerticalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = verticalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  generateHorizontalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = horizontalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, 10);\r\n  }\r\n\r\n  render() {\r\n    let { grid } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\r\n          generatingMaze={this.state.generatingMaze}\r\n          visualizeDijkstra={this.visualizeDijkstra.bind(this)}\r\n          visualizeAStar={this.visualizeAStar.bind(this)}\r\n          visualizeGreedyBFS={this.visualizeGreedyBFS.bind(this)}\r\n          visualizeBidirectionalBFS={this.visualizeBidirectionalBFS.bind(this)}\r\n          visualizeBFS={this.visualizeBFS.bind(this)}\r\n          visualizeDFS={this.visualizeDFS.bind(this)}\r\n          visualizeRandomWalk={this.visualizeRandomWalk.bind(this)}\r\n          generateRandomMaze={this.generateRandomMaze.bind(this)}\r\n          generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(\r\n            this\r\n          )}\r\n          generateVerticalMaze={this.generateVerticalMaze.bind(this)}\r\n          generateHorizontalMaze={this.generateHorizontalMaze.bind(this)}\r\n          clearGrid={this.clearGrid.bind(this)}\r\n          clearPath={this.clearPath.bind(this)}\r\n        />\r\n        <div\r\n          className={\r\n            this.state.visualizingAlgorithm || this.state.generatingMaze\r\n              ? \"grid-visualizing\"\r\n              : \"grid\"\r\n          }\r\n        >\r\n          {grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId}>\r\n                {row.map((node, nodeId) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isVisited,\r\n                    isShortest,\r\n                    isWall,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeId}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isVisited={isVisited}\r\n                      isShortest={isShortest}\r\n                      isWall={isWall}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      width={this.state.width}\r\n                      height={this.state.height}\r\n                      numRows={this.state.numRows}\r\n                      numColumns={this.state.numColumns}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getInitialNum(width, height) {\r\n  let numColumns;\r\n  if (width > 1500) {\r\n    numColumns = Math.floor(width / 25);\r\n  } else if (width > 1250) {\r\n    numColumns = Math.floor(width / 22.5);\r\n  } else if (width > 1000) {\r\n    numColumns = Math.floor(width / 20);\r\n  } else if (width > 750) {\r\n    numColumns = Math.floor(width / 17.5);\r\n  } else if (width > 500) {\r\n    numColumns = Math.floor(width / 15);\r\n  } else if (width > 250) {\r\n    numColumns = Math.floor(width / 12.5);\r\n  } else if (width > 0) {\r\n    numColumns = Math.floor(width / 10);\r\n  }\r\n  let cellWidth = Math.floor(width / numColumns);\r\n  let numRows = Math.floor(height / cellWidth);\r\n  return [numRows, numColumns];\r\n}\r\n\r\nfunction getRandomNums(num) {\r\n  num -= 10;\r\n  let randomNums1 = [];\r\n  let temp = 3;\r\n  for (let i = 5; i < num / 2; i++) {\r\n    randomNums1.push(temp);\r\n    temp += 1;\r\n  }\r\n  let randomNums2 = [];\r\n  temp = -3;\r\n  for (let i = num / 2; i < num - 5; i++) {\r\n    randomNums2.push(temp);\r\n    temp -= 1;\r\n  }\r\n  if (Math.random() > 0.5) return [randomNums1, randomNums2];\r\n  else return [randomNums2, randomNums1];\r\n}\r\n\r\nfunction getStartFinishNode(numRows, numColumns) {\r\n  let randomNums;\r\n  let x;\r\n  let y;\r\n  let startNodeRow;\r\n  let startNodeCol;\r\n  let finishNodeRow;\r\n  let finishNodeCol;\r\n  if (numRows < numColumns) {\r\n    randomNums = getRandomNums(numRows);\r\n    x = Math.floor(numRows / 2);\r\n    y = Math.floor(numColumns / 4);\r\n    startNodeRow =\r\n      x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\r\n    startNodeCol = y + [-3, -2, -1, 0][Math.floor(Math.random() * 4)];\r\n    finishNodeRow =\r\n      x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\r\n    finishNodeCol =\r\n      numColumns - y + [0, 1, 2, 3][Math.floor(Math.random() * 4)];\r\n  } else {\r\n    randomNums = getRandomNums(numColumns);\r\n    x = Math.floor(numRows / 4);\r\n    y = Math.floor(numColumns / 2);\r\n    startNodeRow = x + [-3, -2, -1, 0][Math.floor(Math.random() * 4)];\r\n    startNodeCol =\r\n      y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\r\n    finishNodeRow = numRows - x + [0, 1, 2, 3][Math.floor(Math.random() * 4)];\r\n    finishNodeCol =\r\n      y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\r\n  }\r\n  console.log(randomNums);\r\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\r\n}\r\n\r\nconst getInitialGrid = (numRows, numColumns) => {\r\n  let grid = [];\r\n  for (let row = 0; row < numRows; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < numColumns; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    distance: Infinity,\r\n    totalDistance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWalls = (grid, row, col) => {\r\n  let newGrid = grid.slice();\r\n  let node = grid[row][col];\r\n  let newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithMaze = (grid, walls) => {\r\n  let newGrid = grid.slice();\r\n  for (let wall of walls) {\r\n    let node = grid[wall[0]][wall[1]];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: true,\r\n    };\r\n    newGrid[wall[0]][wall[1]] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithoutPath = (grid) => {\r\n  let newGrid = grid.slice();\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      let newNode = {\r\n        ...node,\r\n        distance: Infinity,\r\n        totalDistance: Infinity,\r\n        isVisited: false,\r\n        isShortest: false,\r\n        previousNode: null,\r\n      };\r\n      newGrid[node.row][node.col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst updateNodesForRender = (\r\n  grid,\r\n  nodesInShortestPathOrder,\r\n  visitedNodesInOrder\r\n) => {\r\n  let newGrid = grid.slice();\r\n  for (let node of visitedNodesInOrder) {\r\n    if (\r\n      (node.row === startNodeRow && node.col === startNodeCol) ||\r\n      (node.row === finishNodeRow && node.col === finishNodeCol)\r\n    )\r\n      continue;\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n  for (let node of nodesInShortestPathOrder) {\r\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\r\n      return newGrid;\r\n    }\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: false,\r\n      isShortest: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n};\r\n\r\nconst getVisitedNodesInOrder = (\r\n  visitedNodesInOrderStart,\r\n  visitedNodesInOrderFinish\r\n) => {\r\n  let visitedNodesInOrder = [];\r\n  let n = Math.max(\r\n    visitedNodesInOrderStart.length,\r\n    visitedNodesInOrderFinish.length\r\n  );\r\n  for (let i = 0; i < n; i++) {\r\n    if (visitedNodesInOrderStart[i] !== undefined) {\r\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\r\n    }\r\n    if (visitedNodesInOrderFinish[i] !== undefined) {\r\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n\r\n/* <button className=\"button\" onClick={() => this.visualizeDijkstra()}>\r\nDijkstra's\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeAStar()}>\r\nA Star\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeBFS()}>\r\nBreadth First Search\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeDFS()}>\r\nDepth First Search\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.visualizeRandomWalk()}>\r\nRandom Walk\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.clearGrid()}>\r\nClear Grid\r\n</button>\r\n<br />\r\n<button className=\"button\" onClick={() => this.visualizeGreedyBFS()}>\r\nGreedy Best First Search\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.visualizeBidirectionalBFS()}\r\n>\r\nBidirectional Best First Search\r\n</button>\r\n&nbsp;\r\n<button className=\"button\" onClick={() => this.generateRandomMaze()}>\r\nRandom Maze\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.generateRecursiveDivisionMaze()}\r\n>\r\nRecursive Division\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.generateVerticalMaze()}\r\n>\r\nVertical Maze\r\n</button>\r\n&nbsp;\r\n<button\r\nclassName=\"button\"\r\nonClick={() => this.generateHorizontalMaze()}\r\n>\r\nHorizontal Maze\r\n</button>\r\n */\r\n","export function randomMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let walls = [];\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      if (\r\n        (row === startNode.row && col === startNode.col) ||\r\n        (row === finishNode.row && col === finishNode.col)\r\n      )\r\n        continue;\r\n      if (Math.random() < 0.33) {\r\n        walls.push([row, col]);\r\n      }\r\n    }\r\n  }\r\n  return walls;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/js/dist/dropdown\";\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}